package yxs.shuai.Utils;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import yxs.shuai.bean.Person;import android.app.Activity;import android.graphics.Bitmap;import android.graphics.Bitmap.CompressFormat;import android.graphics.BitmapFactory;import android.os.Environment;import android.view.Display;/** * 本文用到的所有工具 *  * @author Shuai__Xiu *  */public class Utils {	/*	 * List格式转换成Json	 */	public static JSONArray ListToJson(List<Person> list) {		JSONArray ArrayJson = new JSONArray();		JSONObject json = null;		for (Person person : list) {			json = new JSONObject();			try {				json.put("title", person.getName());				json.put("many", person.getMany());				json.put("time", person.getTime());				json.put("zhanghao", person.getZH());				json.put("imgAddress", person.getImgAddress());			} catch (JSONException e) {				e.printStackTrace();			}			ArrayJson.put(json);		}		return ArrayJson;	}	/*	 * Json格式转换秤List	 */	public static List<Person> JsonToList(String data) {		JSONArray json = null;		try {			json = new JSONArray(data);		} catch (JSONException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		ArrayList<Person> list = new ArrayList<Person>();		Person p = null;		for (int i = 0; i < json.length(); i++) {			p = new Person();			try {				JSONObject js = (JSONObject) json.get(i);				p.setName(js.getString("title"));				p.setMany(js.getString("many"));				p.setTime(js.getString("time"));				p.setZH(js.getString("zhanghao"));				list.add(p);			} catch (JSONException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		return list;	}	/*	 * 保存图片到本地	 */	public static String SaveBitmap(Bitmap bit, String name) throws IOException {		File f1 = new File(Environment.getExternalStorageDirectory() + "/shuai");		if (!f1.exists()) {			f1.mkdir();		}		File f3 = new File(Environment.getExternalStorageDirectory()				+ "/shuai/" + "img");		if (!f3.exists()) {			f3.mkdir();		}		File f4 = new File(Environment.getExternalStorageDirectory()				+ "/shuai/img/"+".nomedia");		if(!f4.exists()){			f4.mkdir();		}		File f2 = new File(Environment.getExternalStorageDirectory()				+ "/shuai/img/" + name + ".jpg");		if (!f2.exists()) {			f2.createNewFile();		}		FileOutputStream out = new FileOutputStream(f2);		bit.compress(CompressFormat.JPEG, 50, out);		out.flush();		out.close();		return name;	}	/*	 * 转换得Bitmap	 */	public static Bitmap getBitmap(Activity activity, InputStream in)			throws IOException {		Bitmap bit = ReduceBitmap(activity, in);		return bit;	}	/*	 * Bitmap压缩	 */	@SuppressWarnings("deprecation")	private static Bitmap ReduceBitmap(Activity activity, InputStream in)			throws IOException {		byte[] b = null;		b = InputToByte(in);		BitmapFactory.Options opt = new BitmapFactory.Options();		opt.inJustDecodeBounds = true;		BitmapFactory.decodeByteArray(b, 0, b.length, opt);		int outHeight = opt.outHeight;		int outWidth = opt.outWidth;		Display defaultDisplay = activity.getWindowManager()				.getDefaultDisplay();		int height = defaultDisplay.getHeight();		int width = defaultDisplay.getWidth();		int widScale = outWidth / width;		int heiScale = outHeight / height;		int Scale = widScale > heiScale ? widScale : heiScale;		opt.inSampleSize = Scale;		opt.inJustDecodeBounds = false;		Bitmap bm = BitmapFactory.decodeByteArray(b, 0, b.length, opt);		return bm;	}	/*	 * 将InputStream转换组成数组	 */	private static byte[] InputToByte(InputStream in) throws IOException {		ByteArrayOutputStream out = new ByteArrayOutputStream();		int a = -1;		byte[] b = new byte[1024];		while ((a = in.read(b, 0, b.length)) != -1) {			out.write(b, 0, a);		}		out.flush();		out.close();		return out.toByteArray();	}	/*	 * 将InputStream转换组成字符串	 */	public static String InputToString(InputStream in) throws IOException {		ByteArrayOutputStream out = new ByteArrayOutputStream();		int a = -1;		byte[] b = new byte[1024];		while ((a = in.read(b, 0, b.length)) != -1) {			out.write(b, 0, a);		}		out.flush();		out.close();		return out.toString();	}}